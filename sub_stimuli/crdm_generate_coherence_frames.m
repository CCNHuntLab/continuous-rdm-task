function [ coherence_frame, mean_coherence, trialPositionVector ] = ...
    crdm_generate_coherence_frames( noiseFlag, nFramesTotal, coherence_sd, ...
    coherenceTrialList, itiList, trialLength, meanDur, minDur, maxDur )
%CRDM_GENERATE_COHERENCE_FRAMES This function produces a vector of framewise coherence for a
%whole block of the continuous RDK task.
%   IN: 
% noiseFlag         - 'trials': when calculating the original coherence_frame
%                     vector for displaying the rdms, however, every time
%                     button has been pressed during coherent motion period,
%                     the remaining frames of coherent motion have to be
%                     replaced by incoherent motion which is drawn from
%                     another vector that is generated when the flag =
%                     'noise' (continuous motion task only)
% nFramesTotal      - length in frames of vector to produce
% coherence_sd      - standard deviation for a normal distributin that we
%                     use to sample coherence levels during incoherent motion
%                     periods
% coherenceTrialList- vector with sequence coherence values used for
%                     coherent motion periods - used to fill up coherent
%                     periods in mean_coherence (for continuous task
%                     version only)
% itiList           - vector containing list of length of incoherent motion
%                     periods between coherent motion periods in number of
%                     frames 
% trialLength       - length of a coherent motion period in number of
%                     frames 
% meanDur           - incoherent motion periods are generated by
%                     drawing steps from an exponential function when
%                     coherence values change: this is the mean duration
%                     before a step occurs
% minDur            - minimum duration (for truncating exp function)
% maxDur            - maximum duration (for truncating exp function)
%
%   OUT:
% coherence_frame   - vector with coherence
%                     values during incoherent and coherent motion periods
%                     for each frame
% mean_coherence    - vector of zeros for incoherent motion periods and the level of
%                     coherence at periods of coherent motion for each frame
%                     (for continuous task version only)
% trialPositionVector - vector with zeros during baseline and trial idx
%                   during trials

sdCohNoise = coherence_sd(1);

coherence_frame = zeros(nFramesTotal, 1);
mean_coherence = zeros(nFramesTotal, 1);
trialPositionVector = zeros(nFramesTotal, 1);

%% Generate sequence of coherences
switch noiseFlag
    % Case 1: We are creating a proper stimulus with trials and ITIs
    case 'trials'
        sdCohTrial = coherence_sd(2);
        idxBaseline = 1; % index to loop through incoherent motion periods (first frame)
        idxTrial = 1;  % index to loop through coherent motion periods

        for iIti = 1 : numel(itiList) % loop through incoherent motion periods of a block
            
            % Always start with a period of incoherent motion (first ITI)
            incoh_filtered = crdm_calculate_coherence_vec(itiList(iIti), meanDur,...
                minDur, maxDur, 0, sdCohNoise);

            % get idx of last frame of this period of incoherent motion
            end_of_incoh_mot = idxBaseline + itiList(iIti)-1;

            % set incoherent motion period in mean_coherence vector to a mean
            % coherence of 0
            mean_coherence(idxBaseline : end_of_incoh_mot)= zeros(itiList(iIti),1); % incoh_motion mean for ITIS interval
            trialPositionVector(idxBaseline : end_of_incoh_mot)= zeros(itiList(iIti),1);
            % fill the same epoch with the filtered incoherent motion in the
            % coherencne_frame vector
            coherence_frame(idxBaseline:end_of_incoh_mot) = incoh_filtered;

            % calculate first idx of coherent motion period
            first_coh_mot_f = idxBaseline + itiList(iIti);

            % Always end with a period of incoherent motion (last ITI), but
            % until we've reached this last ITI, slot in periods of
            % coherent motion after every ITI.
            if iIti < numel(itiList)
                mean_coh_vec = ...
                    crdm_calculate_coherence_vec(trialLength+1, meanDur, ...
                    minDur, maxDur, coherenceTrialList(idxTrial), sdCohTrial);

                last_coh_mot_f = first_coh_mot_f + length(mean_coh_vec) -1;

                coherence_frame(first_coh_mot_f:last_coh_mot_f) = mean_coh_vec;
                mean_coherence(first_coh_mot_f :last_coh_mot_f) = zeros(length(mean_coh_vec),1) + coherenceTrialList(idxTrial);
                trialPositionVector(first_coh_mot_f:last_coh_mot_f) = zeros(length(mean_coh_vec),1) + idxTrial;
            end

            idxBaseline = last_coh_mot_f + 1; % update first frame of next incohrent motion period
            idxTrial = idxTrial + 1; % update trial for next coherent motion period

        end
        
    case 'noise' % we're only generating noise all the way through the block
        pureNoiseVector = crdm_calculate_coherence_vec(nFramesTotal, meanDur,...
            minDur, maxDur, 0, sdCohNoise);

        mean_coherence = zeros(nFramesTotal, 1);
        coherence_frame = pureNoiseVector;
end
    
end
